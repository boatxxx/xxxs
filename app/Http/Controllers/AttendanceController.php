<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\AttendanceRecord;
use App\Models\Student;
use App\Models\Activity;
use App\Models\Teacher;
use App\Models\Classroom;
use GuzzleHttp\Client;
use App\Models\Level;
use Maatwebsite\Excel\Facades\Excel;

class AttendanceController extends Controller
{

    public function importExcel2(Request $request)
    {
        $data = Excel::toArray(new ExcelImportController, $request->file('file'));

        // ‡∏ß‡∏ô loop ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        foreach ($data[0] as $column) {
            // $column[0] ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏±‡πâ‡∏ô ‡πÜ
            // ‡πÉ‡∏ä‡πâ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            if ($column[1] !== null) {
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô activities
                Activity::create([
                    'activity' => $column[0],
                    'level' => $column[1], // ‡∏°‡∏≠‡∏ö‡∏´‡∏°‡∏≤‡∏¢ level
                ]);
            }
        }


        return redirect()->back()->with('success', 'Import successful!');
    }



    public function welcome()
    {

        return view('welcome');

    }
    public function index(Request $request)
    {
        $level = $request->input('level'); // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ level ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å URL

        $classrooms = Classroom::where('level', $level)->get(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ level ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
        $activities = Activity::where('level', $level)->get(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ level ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
        $teachers = Teacher::all();


        return view('attendance.index', compact('classrooms', 'activities', 'teachers'));
    }
    public function index1(Request $request)
    {
        $request->validate([
            'classroom' => 'required|exists:classrooms,id',
            'activity' => 'required|exists:activities,id',
            'lecturer' => 'required|exists:teachers,id',
        ]);

        $classroomId = $request->input('classroom');
        $activityId = $request->input('activity');
        $lecturerId = $request->input('lecturer');
        $classroom = Classroom::find($classroomId);
        $activity = Activity::find($activityId);
        $lecturer = Teacher::find($lecturerId);
        $students = Student::where('grade', $classroomId)->get();

        return view('attendance.index1', compact('classroomId', 'activityId', 'lecturerId', 'students', 'classroom', 'activity', 'lecturer'));

    }



    public function submitAttendance(Request $request)
    {
        $classrooms = Classroom::all();
        $activities = Activity::all();
        $teachers = Teacher::all();
        $students = $request->students;
        $classroomId = $request->input('classroomId');
        $activityId = $request->input('activityId');
        $lecturerId = $request->input('lecturerId');
        $studentNames = $request->input('studentName');
        $studentLastNames = $request->input('studentLastName');
        $studentLevels = $request->input('studentLevel');
        $studentID = $request->input('studentID');
        $classroom = Classroom::find($classroomId);
        $activity = Activity::find($activityId);
        $lecturer = Teacher::find($lecturerId);

        $attendanceCounts = [
            '‡∏°‡∏≤' => 0,
            '‡∏™‡∏≤‡∏¢' => 0,
            '‡∏Ç‡∏≤‡∏î' => 0,
            '‡∏•‡∏≤' => 0,
        ];
        $absentStudents = [];
        $leaveStudents = [];
  foreach ($studentNames as $index => $name) {
            $attendance = $request->input('attendance' . $index);
            $studentFullName = $name . ' ' . $studentLastNames[$index];

            // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á AttendanceRecord
            AttendanceRecord::create([
                'activity_id' => $activityId,
                'student_id' => $studentID[$index],
                'grade' =>  $classroomId,
                'time' => now(),
                'status' => $request->input('attendance' . $index),
                'lecturer_id'=> $lecturerId,
                // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
            ]);
        }
        foreach ($studentNames as $index => $name) {
            $attendance = $request->input('attendance' . $index);
            $studentFullName = $name . ' ' . $studentLastNames[$index];

            // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            if (isset($attendanceCounts[$attendance])) {
                $attendanceCounts[$attendance]++;
            }

            // ‡πÅ‡∏¢‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏•‡∏≤
            if ($attendance == '‡∏Ç‡∏≤‡∏î') {
                $absentStudents[] = $studentFullName;
            } elseif ($attendance == '‡∏•‡∏≤') {
                $leaveStudents[] = $studentFullName;
            }
        }

        // ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á "‡∏Ç‡∏≤‡∏î"
        $allAbsentStudents = array_merge($absentStudents, $leaveStudents);
        $totalStudents = count($studentNames);

        $message = "‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ö‡πâ‡∏≤‡∏ô‡∏à‡∏±‡πà‡∏ô:\n";
        $message .= "üìå ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà " . now()->format('d/m/Y') . "\n";
        $message .= "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô:  $classroom->grade \n";
        $message .= "‡∏ß‡∏¥‡∏ä‡∏≤: $activity->activity\n";
        $message .= "‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô: $lecturer->lecturer\n";
        $message .= "üì¢ ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: $totalStudents ‡∏Ñ‡∏ô\n";
        $message .= "‚úÖ ‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: " . $attendanceCounts['‡∏°‡∏≤'] . " ‡∏Ñ‡∏ô\n";
        $message .= "‚è∞ ‡∏°‡∏≤‡∏™‡∏≤‡∏¢: " . $attendanceCounts['‡∏™‡∏≤‡∏¢'] . " ‡∏Ñ‡∏ô\n";
        $message .= "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: " . $attendanceCounts['‡∏Ç‡∏≤‡∏î'] . " ‡∏Ñ‡∏ô\n";
        $message .= "üìä ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô (‡∏™‡∏≤‡∏¢, ‡∏Ç‡∏≤‡∏î, ‡∏•‡∏≤) ‡∏°‡∏µ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:\n";

        if (!empty($lateStudents)) {
            $message .= "‚è∞ ‡∏°‡∏≤‡∏™‡∏≤‡∏¢:\n";
            foreach ($lateStudents as $lateStudent) {
                $message .= "- $lateStudent\n";
            }
        }

        if (!empty($absentStudents)) {
            $message .= "‚ùå ‡∏Ç‡∏≤‡∏î:\n";
            foreach ($absentStudents as $absentStudent) {
                $message .= "- $absentStudent\n";
            }
        }

        if (!empty($leaveStudents)) {
            $message .= "üèñ ‡∏•‡∏≤:\n";
            foreach ($leaveStudents as $leaveStudent) {
                $message .= "- $leaveStudent\n";
            }
        }
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Line Notify
        $token = $classroom->line_1 . $classroom->line_2 . $classroom->line_3;
        $client = new Client();
        $response = $client->post('https://notify-api.line.me/api/notify', [
            'headers' => [
                'Authorization' => 'Bearer ' . $token,
            ],
            'form_params' => [
                'message' => $message,
            ],
        ]);


        return view('attendance.index', compact('classroomId', 'activityId', 'lecturerId',  'classroom', 'activity', 'lecturer', 'studentLevels','classrooms', 'activities', 'teachers','students'));

    }
    public function store(Request $request)
    {
       // Check if $request->attendance exists and is not null
       if ($request->has('attendance') && !is_null($request->attendance)) {
        // Process and store attendance records
        foreach ($request->attendance as $index => $attendance) {
            AttendanceRecord::create([
                'activity_id' => $request->activityId,
                'student_id' => $request->studentId[$index],
                'grade' => $request->grade[$index],
                'time' => now(), // Assuming this is the current time
                'status' => $attendance,
                // Add more fields as needed
            ]);
        }

        // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        return redirect()->back()->with('success', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');
    } else {
        // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        return redirect()->back()->with('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    }
    }

}
